TODO:
- Use socket.io later. (Both client and server-side congruence)

einaros/ws project: Submit a fix?
https://github.com/einaros/ws/blob/master/lib/WebSocketServer.js
- if (!result) abortConnection(socket, 404, 'Unauthorized')

0) Start using RequireJS on front-end and refactor to use its module pattern.
- Get jQuery integrated and use the property idioms/patterns.
1) Refactor into modules so can unit-test.
- Use hash of username as key for Object map (hashmap) so can easily test for membership w/o risking built-in Object property overwriting.
- MD5 should be good enough; doesn't need to be cryptographically secure.
  http://stackoverflow.com/questions/1655769/fastest-md5-implementation-in-javascript
  https://github.com/blueimp/JavaScript-MD5
  https://github.com/satazor/SparkMD5
- Should the username hash be the primary lookup, instead of server-generated connection ID? Risks?
2) Improve UI using something like:
   https://news.ycombinator.com/item?id=7404218
   - Multiple chat rooms using History API/URI hash-fragment?
   - JavaScript MVC?
   http://facebook.github.io/react/
   https://usepropeller.com/blog/posts/from-backbone-to-react/
   - Backbone.js?
   http://backbonejs.org/#
   - Learn example:
   http://backbonejs.org/examples/todos/index.html
   - Word-wrap?
3) Add picture upload/share capability using HTML5 File API:
   http://www.html5rocks.com/en/tutorials/file/dndfiles/
   (Base64-encode for upload and display in browser)
   See previous examples we've worked on.


Chat:
- // Use Node http to serve up static page as client; see if can run on same port as WS. (This will be needed for deployment)
  http://stackoverflow.com/questions/6084360/node-js-as-a-simple-web-server
  http://stackoverflow.com/questions/16333790/node-js-quick-file-server-static-files-over-http
  http://stackoverflow.com/questions/14576644/whats-the-simplest-way-to-serve-static-files-using-node-js
  https://github.com/cloudhead/node-static
- Use WSS (TLS) if available: Possible to use protocol-relative URI for this?
  http://www.websocket.org/echo.html
- Start using nodemon to refresh server automatically upon changes.
- Ajax endpoint to test if username is in use before login.
  - Use hash function and object property name for quick "in"/membership test.

iOS6/7 and Android/Chrome:
- WebSocket connection doesn't work when on same port as HTTP server. 
- This is why it works on OpenShift; WS traffic is remapped to another port. (8000 or 8443)
- Use a different port: Works on Android/Chrome but CRASHES iOS6|7/Safari.

TODO: PC: OpenShift: The WS upgrade doesn't seem to work on the same port as the regular HTTP server.
- Appears to just return 200, causing an error.
- Something different in the environment; debug and check logs.
- Perhaps need a different URI so can redirect the requests to WS?
- Seems like the HTTP server does everything. Is the WS server even started?
- May be due to all the network/proxy/load balancers going through; actual port running on is 8080!
- It is possible this mucks with the WebSocket transport and it's lost.
- Use a different URI to try and make sure the request is not handled by the HTTP server?
- Looks like they do some environment/network re-mapping, and you have to use port 8000 for 
WS, regardless of what it actually listens on!
http://tamas.io/deploying-a-node-jssocket-io-app-to-openshift/
http://stackoverflow.com/questions/19948974/websocket-connection-to-openshift-app-failed
https://github.com/openshift-quickstart/openshift-nodejs-http-and-websocket-example
- Is it 3000 or 8080? [8080 works -> HTTP to 80, WS to 8000]
- May want to blog about this, as it's obscure!

Configuration: Figure out how to use Konfig with OpenShift: Possible to modify the node start command? Does it use package.json?
http://stackoverflow.com/questions/5869216/how-to-store-node-js-deployment-settings-configuration-files
- Can't continue as-is, with separate repos/hard-coded configs.

PROJECT STRUCTURE:
- UNIT TESTS: Figure out how to do. (Best practices?)
- Refactor into modules. (For testability)
http://stackoverflow.com/questions/5311334/what-is-the-purpose-of-nodejs-module-exports-and-how-do-you-use-it
- How to structure the project? Best practices?
http://stackoverflow.com/questions/5178334/folder-structure-for-a-nodejs-project
- Can use Grunt to build/test/deploy?
- Figure out a way to get interactive Node.js shell so can rapidly prototype/test.



Client-configuration:
1) Take domain name from current URL in browser?
2) Get websocket address/port from simple REST API running on web server? (That way, can get at runtime based on where the server's running)
3) Test (again) to see if mobile (iOS, Android) works when HTTP and WebSocket share the SAME port.
4) Resize chat output when keyboard on screen OR ensure all messages align to bottom!
http://ux.stackexchange.com/questions/17737/responsive-layouts-can-they-respond-to-on-screen-keyboards-i-e-tablet-mo
- iOS6/Safari: Not working?
5) iOS7/Safari: Lag when typing into input chat message field; does not show up immediately.
6) Optimize sizing for mobile; doesn't look great. Need to make it a RWD.
- Sometimes font size in chat output box increases dramatically on mobile; probably due to window.resize() event. Fix.
